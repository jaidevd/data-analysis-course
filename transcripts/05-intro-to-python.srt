1
00:00:00,000 --> 00:00:08,920
Welcome back. So now that we have a fair bit of background in the theory behind data analysis,

2
00:00:08,920 --> 00:00:14,400
in this video what we're going to do is start getting our hands dirty with some of the tools

3
00:00:14,400 --> 00:00:21,040
and libraries available in Python for data analysis. So first we are going to start with

4
00:00:21,040 --> 00:00:27,040
data structures and data types. These are essentially objects inside a programming language

5
00:00:27,040 --> 00:00:32,800
that help you contain your data and that help you store and access your data properly. So they are

6
00:00:32,800 --> 00:00:37,640
broadly called data structures. The most common data structure or the most useful data structure

7
00:00:37,640 --> 00:00:45,120
that we have in Python is called simply a list. So this is simply a linked list for those of you

8
00:00:45,120 --> 00:00:51,040
who come from a programming background and they can simply be created by putting a bunch of things

9
00:00:51,040 --> 00:00:57,480
separated by a comma inside a list of inside a pair of square brackets. Some of the things to

10
00:00:57,480 --> 00:01:03,360
remember is that a list is an object which can contain multiple data items obviously and they

11
00:01:03,360 --> 00:01:09,280
are mutable. What this means is that once you create a list you can keep on endlessly changing

12
00:01:09,280 --> 00:01:15,560
it, modifying it, editing it. So you can also use them as temporary data storage devices. You can

13
00:01:15,560 --> 00:01:22,160
use them to include variables or data points whatever you like and they can change in the

14
00:01:22,160 --> 00:01:28,520
course of a program's execution. They're also dynamic in the sense that items may be added or

15
00:01:28,520 --> 00:01:34,520
removed from them as and when you like depending on whatever program you like. The biggest advantage

16
00:01:34,520 --> 00:01:41,360
of lists is that they are heterogeneous in the sense that they don't create any restrictions in

17
00:01:41,360 --> 00:01:48,360
terms of what kind of objects can go inside them. You can add numbers, you can add text, you can add

18
00:01:48,360 --> 00:01:54,200
floating point values, booleans, any type of data that you can imagine in Python you can add it to

19
00:01:54,200 --> 00:02:01,840
a list. Now this makes a list very flexible but it also makes it a little slow. Since these are

20
00:02:01,840 --> 00:02:08,920
linked lists if I have to find the second item in a list I have to first find the first item. Of course

21
00:02:08,920 --> 00:02:13,680
I don't have to do this manually. Python does it internally but since this is a linked list what

22
00:02:13,680 --> 00:02:19,760
happens is if I am looking at say the kth item in a particular list I need to know the sequence

23
00:02:19,760 --> 00:02:26,040
that comes before it because the only way I can reach a given data point or a given item in a

24
00:02:26,040 --> 00:02:33,360
list is if I traverse through the preceding lists of items in the whole list basically. So I can't

25
00:02:33,360 --> 00:02:38,280
randomly pick a particular item from a list. The reason why this happens is that you know since

26
00:02:38,280 --> 00:02:44,240
lists are heterogeneous and they can contain any kind of data and since it can contain multiple

27
00:02:44,240 --> 00:02:51,520
types of data the memory that is taken up by each type has a different size. So for example if I

28
00:02:51,520 --> 00:02:58,440
store only a list of integers then I know that each and each integers can take anywhere from 8 to 64

29
00:02:58,440 --> 00:03:04,160
bytes. So therefore I can calculate where a particular integer lies because let's say that

30
00:03:04,160 --> 00:03:09,560
I have a list of 15 integers and I want to pick the fifth integer then I know that it's going to

31
00:03:09,560 --> 00:03:16,080
be at 5 into 64 bits from the beginning of the list. So I can directly jump to that but since

32
00:03:16,080 --> 00:03:21,880
lists are heterogeneous that is they allow multiple data types to be contained within them it's not

33
00:03:21,880 --> 00:03:28,640
possible for me to do that calculation. Let's see how that actually matters later in the program.

34
00:03:28,640 --> 00:03:34,140
So this is a simple way of creating a list you simply create a pair of square brackets and put

35
00:03:34,140 --> 00:03:39,460
things inside them. In this particular case we are putting three strings inside a list. A string

36
00:03:39,460 --> 00:03:44,420
in Python is anything that appears within double or single quotes. So it doesn't matter whether

37
00:03:44,420 --> 00:03:49,060
I use a double quote or a single quote it's basically a piece of text or a string and I

38
00:03:49,060 --> 00:03:54,620
can just put commas between two separate items. So this becomes a list which has three strings

39
00:03:54,620 --> 00:03:59,940
inside it the first of which is apples the second is oranges and the third is cherries. So let's run

40
00:03:59,940 --> 00:04:05,860
that and yeah that's basically what my list looks like. We can also add you know you can

41
00:04:05,860 --> 00:04:10,940
assign that to an output variable. Here we have a new list which contains four strings let's

42
00:04:10,940 --> 00:04:17,060
pretend that they are product numbers in my stock inventory or something like that and then that

43
00:04:17,060 --> 00:04:26,860
becomes my list again. So I can just do something like this and that's my list again. Just like we

44
00:04:26,860 --> 00:04:32,420
have strings we can also have numbers in this case let's say that we have sales by month for

45
00:04:32,420 --> 00:04:37,300
four months so I have four numbers over here. So I can just add them to this list called sales

46
00:04:37,300 --> 00:04:43,180
by month and there it is. You can also have nested lists in the sense that we have already

47
00:04:43,180 --> 00:04:49,220
decided that a list an element of a list can be anything. We saw that it's a string we saw

48
00:04:49,220 --> 00:04:55,100
that it can be a number or an integer it can be a whole list by itself. So a nested list is nothing

49
00:04:55,100 --> 00:05:01,220
but a list which contains other lists. So we see that this sales by season is a list which

50
00:05:01,220 --> 00:05:10,380
contains four other lists right and you can see that each of those sub lists has three elements

51
00:05:10,380 --> 00:05:17,060
each and there are four of them so you can imagine this like a three by four table. So that's also

52
00:05:17,060 --> 00:05:25,380
just as easy to create basically to reinforce lists make no restriction on what sort of data

53
00:05:25,380 --> 00:05:31,060
it can contain you can pretty much add anything. So let's say that we have a simple exercise here

54
00:05:31,060 --> 00:05:39,940
we have to create a list which stores your name your age and your gender. So pause the video and

55
00:05:39,940 --> 00:05:47,780
try it out. Well it's simple enough I can just create say and I'll create a list and let me call

56
00:05:47,780 --> 00:05:53,700
it some suitable variable I say something like mighty teams and first thing I need to do is

57
00:05:53,700 --> 00:05:59,180
create a pair of square brackets because that's the syntax for creating a list. Now what I want

58
00:05:59,180 --> 00:06:04,140
to store is my name age and gender my name is obviously going to be a string so I'll write my

59
00:06:04,140 --> 00:06:12,500
name my age now age can be an integer so I'll write my age my gender again can be a string which

60
00:06:12,500 --> 00:06:18,940
is male in this case but you can write something like that or you know you can actually write out

61
00:06:18,940 --> 00:06:24,940
the whole thing as well right so that's simply my list. So let's talk about what are some of the

62
00:06:24,940 --> 00:06:29,900
common operations on list one of the most common things that you do with the list is try to find

63
00:06:29,900 --> 00:06:35,220
the length of a list so we have this list called sales by month and we can see that its length is

64
00:06:35,220 --> 00:06:40,460
four but that's because I have the source code for that list right in front of me what if I don't

65
00:06:40,460 --> 00:06:44,940
know how this list was created but I still need to find out its length in a programmatic way I can

66
00:06:44,940 --> 00:06:50,720
just use the length function to do that so I just call the length function and give the list as the

67
00:06:50,720 --> 00:06:54,820
input and it's going to give me the length so let's try that and it says that the length of that

68
00:06:54,820 --> 00:07:02,420
list is four one two three and four right now how do I access a particular element from the list well

69
00:07:02,420 --> 00:07:07,340
I just use the name of the list followed by a pair of square brackets and inside that square

70
00:07:07,340 --> 00:07:14,500
brackets I give a position so that will just that's just going to give me the element that

71
00:07:14,500 --> 00:07:20,660
corresponds to that position remember that in Python counting starts from zero so basically

72
00:07:20,660 --> 00:07:25,580
this particular element is not the first but the zeroth element of the list this then becomes the

73
00:07:25,580 --> 00:07:29,900
first this becomes the second and this becomes the third right and what if I want to change a

74
00:07:29,900 --> 00:07:35,500
particular thing well I just add the position indexer and assign it to a given value so I have

75
00:07:35,500 --> 00:07:42,020
the first element of sales by month was 180 but if I set it to 230 and I print out the list again

76
00:07:42,020 --> 00:07:50,260
here's what I'm going to get so there it is you see that it has gone from 180 to 230 over here so

77
00:07:50,260 --> 00:07:58,180
this is how I can modify a given position in a list another very useful and important operation

78
00:07:58,180 --> 00:08:04,340
on a list is called slicing or indexing sometimes I am not interested in getting a single value out

79
00:08:04,340 --> 00:08:09,280
of a list but a range of values so let's say that I have a list and I want to get the first to the

80
00:08:09,280 --> 00:08:15,380
third value now for that I can use the syntax I can give the starting position then I can add a

81
00:08:15,380 --> 00:08:21,300
column and then I can give the ending position now this works in a slightly funny way the ending

82
00:08:21,300 --> 00:08:26,140
position is not where it stops actually it stops just one shot of the ending position so it's

83
00:08:26,140 --> 00:08:34,540
basically if I want the i-th to the j-th position in the list my syntax will be something like

84
00:08:34,540 --> 00:08:42,860
i colon j minus 1 or basically j plus 1 so it's going to be stopping just one shot of whatever is

85
00:08:42,860 --> 00:08:48,260
the last position so let's check check it out how it works if I have one is to three what this is

86
00:08:48,260 --> 00:08:54,460
going to give me is the first and the second but not the third because it stops one shot so it's

87
00:08:54,460 --> 00:08:59,140
supposed to give me 180 360 but however the first one we have already changed so it's going to give

88
00:08:59,140 --> 00:09:05,780
me 230 and 360 so basically it's going to slice this list and let's run that so you see that we

89
00:09:05,780 --> 00:09:12,100
get 230 and 360 the idea is that you start with the first element after the colon whatever is the

90
00:09:12,100 --> 00:09:19,060
element you stop one shot of that so if I can also modify this the syntax a little bit I can

91
00:09:19,060 --> 00:09:23,820
say that I want the first three digits so then I just omit the starting position and it's just

92
00:09:23,820 --> 00:09:29,620
going to give me the first three elements of the list so there it is it gives me 250 230 360 just

93
00:09:29,620 --> 00:09:35,580
copied over here I can also do something like give me everything from the second element onwards

94
00:09:35,580 --> 00:09:41,260
now the second element here is 360 because again remember that counting starts with 0 so here in

95
00:09:41,260 --> 00:09:46,940
this case we are going to get 360 and 340 let's try that and there it is right and let's say that

96
00:09:46,940 --> 00:09:53,860
I want the second to the last element so I can basically do one remember that again counting

97
00:09:53,860 --> 00:09:58,580
starts with 0 so the second element is actually the first in Python I can go all the way up to

98
00:09:58,580 --> 00:10:03,860
4 because 4 doesn't exist obviously so it's going to short one stop of it's going to stop one shot

99
00:10:03,860 --> 00:10:11,020
of that anyway so in this case I'm going to get 230 360 and 340 we already have some idea of how

100
00:10:11,020 --> 00:10:17,180
we can create lists but one quick way of generating a list from another type of data structure which

101
00:10:17,180 --> 00:10:23,020
is still sequential is using the list function and the range function is something which is a

102
00:10:23,020 --> 00:10:28,420
special function in Python which creates a range of integers so when I say that I want a range of

103
00:10:28,420 --> 00:10:34,500
all the integers from 2 to 20 I can use this syntax as again with the slicing here also in

104
00:10:34,500 --> 00:10:42,260
the range function the range is going to stop just one short of we already know one way of

105
00:10:42,260 --> 00:10:48,620
creating a list that is enclosing items within square parenthesis but there are some other ways

106
00:10:48,620 --> 00:10:53,260
of doing it as well one of them is to use the list function what the list function does is that it

107
00:10:53,260 --> 00:10:58,820
takes as an input anything that is a sequence of objects and converts it into a list and one of

108
00:10:58,820 --> 00:11:03,660
the things that we can use to create a list of integers is the range function the range function

109
00:11:03,660 --> 00:11:09,380
simply takes a couple of integers as an input and what it's going to do is starting from the first

110
00:11:09,380 --> 00:11:15,700
input and ending all the way up to the last input minus 1 it's going to create the list of those

111
00:11:15,700 --> 00:11:21,580
integers so essentially what I want to do is if I want to create a list of all the integers starting

112
00:11:21,580 --> 00:11:27,460
from 2 and going all the way up to 19 I can use a range function like this remember that range works

113
00:11:27,460 --> 00:11:32,660
similar to the indexing part it essentially starts with a particular number and whatever is

114
00:11:32,660 --> 00:11:38,500
the next number it can go all the way up there minus 1 so this is going to give me a list of

115
00:11:38,500 --> 00:11:45,900
all the integers from 2 to 19 right and what I can do is here my step size was 1 because I didn't

116
00:11:45,900 --> 00:11:50,820
add any third operator over here I just said 2 comma 20 which means that it's going to take

117
00:11:50,820 --> 00:11:56,140
1 as the default step size I can change this default step size as well let's say that I want

118
00:11:56,140 --> 00:12:02,380
every even number from 2 to 20 so that I can add a third argument which becomes my step size

119
00:12:02,380 --> 00:12:08,860
so if you add only two arguments it's going to interpret as start and stop plus 1 and if you

120
00:12:08,860 --> 00:12:14,660
add a third argument it's going to interpret that third argument as the step size that is the number

121
00:12:14,660 --> 00:12:19,960
of numbers it should skip while creating the list so let's take a look at how that works so you see

122
00:12:19,960 --> 00:12:25,620
I have all the even numbers from 2 to 19 remember that 20 is still skipped because it's supposed to

123
00:12:25,620 --> 00:12:33,340
stop one short of 20 okay note that the stopping position is excluded now my list is basically all

124
00:12:33,340 --> 00:12:40,060
the even numbers from 2 to 19 and what I'm going to do here is take second third fourth and fifth

125
00:12:40,060 --> 00:12:46,140
I won't take the sixth right so I can just do 2 colon 6 and I'm gonna get something like 2 4 6 8

126
00:12:46,140 --> 00:12:57,220
out of this so there it is no remember that now again let's try some indexing on the newly

127
00:12:57,220 --> 00:13:02,980
created list of even numbers that we have we are asking it to take the second number all the way

128
00:13:02,980 --> 00:13:11,220
up to the fifth number so let's do some slicing on the newly created list that we have over here we

129
00:13:11,220 --> 00:13:15,980
wanted to take the second number all the way to the sixth number or actually the fifth number

130
00:13:15,980 --> 00:13:20,620
because the last position will be excluded and since counting begins from 0 we are going to start

131
00:13:20,620 --> 00:13:27,860
from 6 and go all the way to 6 8 10 12 essentially so let's try that and that's what we get now

132
00:13:27,860 --> 00:13:33,260
remember that this step notation that we have over here the moment you specify a third integer it

133
00:13:33,260 --> 00:13:39,140
becomes a step position we can also apply that to slicing when I say a colon B it will just take

134
00:13:39,140 --> 00:13:47,100
everything from a and in incremental steps of 1 go all the way to B minus 1 but if I add a colon C

135
00:13:47,100 --> 00:13:52,380
as well a third integer as well it's going to take that as again the step size so basically I'll get

136
00:13:52,380 --> 00:13:56,860
this but it will again within this skip every other element so essentially here I'm going to

137
00:13:56,860 --> 00:14:02,620
get something like 6 and 10 so there we are so we just get 6 and 10 which is basically a slice

138
00:14:02,620 --> 00:14:09,140
of this particular data set but with every second element skipped so you see that the

139
00:14:09,140 --> 00:14:14,860
range syntax and the indexing syntax are more or less quite similar here's the next exercise

140
00:14:14,860 --> 00:14:21,820
let's create a list of the first 20 positive integers and slice it to find all even numbers

141
00:14:21,820 --> 00:14:28,980
feel free to pause the video over here and try it out so let's try it we want a list of first

142
00:14:28,980 --> 00:14:34,900
20 positive integers so I'll do something like call the list function and inside it add range

143
00:14:34,900 --> 00:14:39,740
I need to start from 1 and I need the list of the first 20 positive integers so I'm going to stop

144
00:14:39,740 --> 00:14:49,220
at 21 and then I'm just going to slice it to give me all the positive integers so I'm going to go

145
00:14:49,220 --> 00:14:58,940
from 1 to 21 in second in orders of by skipping every other integer so that's it that's what gives

146
00:14:58,940 --> 00:15:06,980
me the list of first 20 positive integers and then I slice it to find all the even numbers so

147
00:15:06,980 --> 00:15:12,420
let's look at some of the other more complex operations on list the first being joining list

148
00:15:12,420 --> 00:15:17,860
so basically let's say that I have some data for the first four months of the financial year which

149
00:15:17,860 --> 00:15:24,100
are my sales and obviously new data is going to come over so I have the data for the next few

150
00:15:24,100 --> 00:15:30,940
months I can just add lists by using the plus operator I can just do sales by month plus sales

151
00:15:30,940 --> 00:15:38,540
new now what the plus equal to operator is going to do is simply append the two lists and write the

152
00:15:38,540 --> 00:15:44,860
output in the original list itself so I can do if I have a list say sales by month and another one

153
00:15:44,860 --> 00:15:49,540
called sales new I can do sales by month plus sales new but that's going to give me a third

154
00:15:49,540 --> 00:15:54,780
list if I just want to increment this list which is simply to add numbers at the end of this I can

155
00:15:54,780 --> 00:16:00,660
use this plus equal to operator so let's try that and there it is so basically I have the sales by

156
00:16:00,660 --> 00:16:05,940
month and these are my sales new and sales by month gets updated to include the whole list not

157
00:16:05,940 --> 00:16:11,580
just it just doesn't remain limited to this of course if I wanted a third variable to contain

158
00:16:11,580 --> 00:16:17,340
the concatenation of these two lists then I could have used simply the plus operator without the

159
00:16:17,340 --> 00:16:26,280
plus equal to syntax here's a simple exercise to basically figure out whether an element is in a

160
00:16:26,280 --> 00:16:32,380
list or not so another very important operation that we do on a list is membership we essentially

161
00:16:32,380 --> 00:16:38,340
try to check if a given number or a given element or a given object is present in the list or not so

162
00:16:38,340 --> 00:16:44,300
let's say that we are running an e-commerce business and we have a bunch of product numbers

163
00:16:44,300 --> 00:16:50,580
so these are our product numbers and what we're going to do is ask the user for an input say enter

164
00:16:50,580 --> 00:16:55,500
product number and we are going to say that if we are going to whatever the user inputs we are

165
00:16:55,500 --> 00:17:02,180
going to assign that value to a variable called search and if search is in product numbers then

166
00:17:02,180 --> 00:17:06,780
we can just say we found this product otherwise we haven't found this product now the idea is

167
00:17:06,780 --> 00:17:12,020
that in order to search for membership let's say search is a particular item and product numbers

168
00:17:12,020 --> 00:17:19,180
is the list I want to search in I can just use the word in so let's try that now let's say it's

169
00:17:19,180 --> 00:17:25,580
asking us to enter a product number I'll basically say for v475 and when I enter it says that it

170
00:17:25,580 --> 00:17:31,580
found the product when I run it again and I say something like x123 then it's not going to be

171
00:17:31,580 --> 00:17:37,460
found basically the idea is to simply you know take a particular element let's say in this case

172
00:17:37,460 --> 00:17:48,660
q143 and say in prodnums so that's going to give me a true because q143 is present in prodnums as a

173
00:17:48,660 --> 00:17:56,620
list however if I try something else which is x123 in prodnums that is not the case so I simply use

174
00:17:56,620 --> 00:18:02,900
this syntax element in list it either gives me a true or false depending on whether that value is

175
00:18:02,900 --> 00:18:08,940
actually present in the list or not right there we are the next and perhaps the most important

176
00:18:08,940 --> 00:18:13,780
thing that you do with the list is iterate on that list we might want to take a specific action

177
00:18:13,780 --> 00:18:21,260
for every element that is present in the list so let's say that I have a list which is our sales

178
00:18:22,100 --> 00:18:29,180
as usual what I do is I simply create a counter which I give it the initial value of 1 and I say

179
00:18:29,180 --> 00:18:35,700
that as I loop through this list I'm just going to print out that and increment the counter so

180
00:18:35,700 --> 00:18:40,420
let's run this and see what it does so it basically tells me that my first month second month third

181
00:18:40,420 --> 00:18:48,980
month had sales of 250, 180, 360 and so on until the list is exhausted and the syntax for doing

182
00:18:48,980 --> 00:18:55,460
that is simply called a for loop so what I can simply do is for x in sales by month I can then

183
00:18:55,460 --> 00:19:00,780
do something with x that will basically give my x which becomes one member at a time so generally

184
00:19:00,780 --> 00:19:14,300
the syntax is like this so like for element in my list do something and element will be one of the

185
00:19:14,300 --> 00:19:18,660
things that is present in the list and it's going to keep on iterating so that's basically the

186
00:19:18,660 --> 00:19:25,740
syntax that I can use to do this now you see lists have a bunch of different methods attached

187
00:19:25,740 --> 00:19:31,340
to them methods are nothing but functions that are attached to certain types of objects so

188
00:19:31,340 --> 00:19:35,900
essentially a method in Python is simply a function except that it is very very tightly

189
00:19:35,900 --> 00:19:41,980
coupled with an object it can only operate on a particular type of object so functions are called

190
00:19:41,980 --> 00:19:46,260
in the following way I can say that I have a function so I have something like my function

191
00:19:46,260 --> 00:19:52,660
and I give it an input of x but method on the other hand is called like this x dot myfuck so

192
00:19:52,660 --> 00:20:01,700
the name of the function precedes succeeds the name of the object one quick way within

193
00:20:01,700 --> 00:20:07,620
an IPython environment like the one you see here to check what all the methods are available on

194
00:20:07,620 --> 00:20:15,260
a given object is something simply like this I know that I have sales by month as a list I can

195
00:20:15,300 --> 00:20:21,060
just put a dot next to it and I can press tab so it gives me a bunch of different things so these

196
00:20:21,060 --> 00:20:25,900
are all the functions and you can see that it's calling itself a function right so what I mean

197
00:20:25,900 --> 00:20:30,460
by this is that append is a function clear is a function copy is a function count is a function

198
00:20:30,460 --> 00:20:36,220
all of these functions are applicable on lists and of course if I were to use something other

199
00:20:36,220 --> 00:20:40,680
which was not a list it will give me functions that are not present that are present for that

200
00:20:40,680 --> 00:20:46,360
particular element right so let's create a list which is simply arrange from 1 to 6 which will

201
00:20:46,360 --> 00:20:51,960
create a range from 1 to 5 and there we are so we have a list of integers from 1 to 5 the dot

202
00:20:51,960 --> 00:20:56,480
append method is used to add elements to this so let's say I just want to add another element over

203
00:20:56,480 --> 00:21:02,600
here now I can do a dot append and whatever input I give that's going to become the next element in

204
00:21:02,600 --> 00:21:09,880
that list so I just say dot append 30 it's going to give me 1 2 3 4 5 30 so let's try that and there

205
00:21:09,880 --> 00:21:16,480
we are we have 1 2 3 4 5 comma 30 pop is basically a function that is just going to pop off the last

206
00:21:16,480 --> 00:21:23,720
one so when I use pop note that I haven't given it anything so by default if you give it no input

207
00:21:23,720 --> 00:21:29,040
it's just going to pop out the very last element in the list so it's going to pop out 30 and we

208
00:21:29,040 --> 00:21:36,680
get our original list back if I wanted to pop out a particular element at a particular location then

209
00:21:36,680 --> 00:21:42,400
I can give that location as an input so when I say a dot pop 3 it's going to remove the element

210
00:21:42,400 --> 00:21:48,520
at position 3 here too remember that positions are 0 starting they are not starting from 1 so

211
00:21:48,520 --> 00:21:55,280
we have 0 1 2 3 so it's going to remove 4 and I'm going to get a list which is 1 2 3 and 5 so

212
00:21:55,280 --> 00:22:00,360
let's try that and there it is it basically removed the element that was present at a particular

213
00:22:00,360 --> 00:22:07,280
position now this was an example of how you remove an element from a list based on its position in

214
00:22:07,280 --> 00:22:15,040
the list how about if I want to remove a position from the list based on its value now I can use

215
00:22:15,040 --> 00:22:19,960
the remove function for that it's basically going to find the element 2 and remove it from the list

216
00:22:19,960 --> 00:22:26,280
so basically now I'm going to get 1 3 and 5 so if I do this you see that it did not remove the element

217
00:22:26,280 --> 00:22:31,760
at the second position but it removed the element which had a value of 2 so this is removing by

218
00:22:31,760 --> 00:22:39,080
position and this is removing by value this might be a critical difference and might become very

219
00:22:39,080 --> 00:22:45,000
useful in certain programming's you can always ask what if 2 is not present at all or what if you

220
00:22:45,000 --> 00:22:51,120
know 3 is beyond the length of the list itself so in those cases it's going to raise an error so

221
00:22:51,120 --> 00:22:56,560
for example I know that the number 0 is not present if I do a dot remove of 0 it's going to

222
00:22:56,560 --> 00:23:00,240
say a value error it's basically going to say that X is not in list which means whatever you

223
00:23:00,240 --> 00:23:06,720
have given as an input it's not in the list right at the same time if I use a has a length of 3 what

224
00:23:06,720 --> 00:23:14,000
if I say a dot pop 9 now it clearly doesn't have 9 elements in it so this is also going to fail let's

225
00:23:14,000 --> 00:23:20,280
see what happens so I say it says index out of range right so what this means is that whatever

226
00:23:20,280 --> 00:23:25,800
position we are asking it to pop from the list that position is completely out of the range of

227
00:23:25,800 --> 00:23:32,240
the list itself the inverse of that is insert it's basically going to add an element at a specific

228
00:23:32,240 --> 00:23:38,000
location remember that append will always add to the end of the list whereas insert is going to add

229
00:23:38,000 --> 00:23:45,520
an element to a specific position in the list now we have 1 3 and 5 and so we have 0 1 and 2 elements

230
00:23:45,760 --> 00:23:50,880
3 is simply going to add another element at the third position right so let's try that so now we

231
00:23:50,880 --> 00:23:56,400
have 1 3 5 20 now of course this is the same as append what if we wanted to do something even

232
00:23:57,280 --> 00:24:02,480
more specific which is like I can also do something like a dot insert I want to add something at the

233
00:24:02,480 --> 00:24:07,840
zeroth position and I can add let's say I want to add the value 0 itself at the zeroth position

234
00:24:07,840 --> 00:24:14,880
and then my a becomes this if I want to add something at say the second position so I can say

235
00:24:14,880 --> 00:24:20,560
insert 2 at the second position or let me add a bigger number just to avoid confusion let's say

236
00:24:20,560 --> 00:24:28,160
I want to insert the number 42 at the second position so then it becomes my list then becomes

237
00:24:28,160 --> 00:24:32,960
something like this at the second position which is actually the third position the number 42 has

238
00:24:32,960 --> 00:24:39,040
been added and then the last one of the most important methods that you can do on a list is

239
00:24:39,040 --> 00:24:44,640
sorting of the list so I can just use the sort function or the sort method on a list

240
00:24:44,640 --> 00:24:50,320
and it's going to by default do an ascending sort so there it is I get the ascendingly sorted

241
00:24:50,320 --> 00:24:57,680
list back if I want to change it to a descending order I can just flip the list now in order to

242
00:24:57,680 --> 00:25:04,720
reverse a list I can do this or I can do something called a dot reverse and then print a again so now

243
00:25:04,720 --> 00:25:14,640
it's becoming an descending list one very useful and somewhat confusing thing when working with

244
00:25:14,640 --> 00:25:20,080
lists is copying them so let's say that a is a list which goes again from one to five as we

245
00:25:20,080 --> 00:25:26,960
created earlier then we create another variable b and simply assign it to a and then we created

246
00:25:26,960 --> 00:25:33,600
another variable c and do an a dot copy now what we're going to do is we are going to set the last

247
00:25:33,600 --> 00:25:40,320
value inside a to 20 now the last value inside a should be 6 minus 1 that is 5 but we are going

248
00:25:40,320 --> 00:25:46,880
to set the value to 20 so basically change the last element in e to 20 and then we print b and c

249
00:25:46,880 --> 00:25:53,840
so let's see what happens so you see when the first print which is printing of b here we see that

250
00:25:54,560 --> 00:26:01,120
because a has changed b also has changed but when we print c we see that c itself has not changed

251
00:26:01,120 --> 00:26:06,720
because we did an explicit copy over here so when you copy a list it basically copies over all the

252
00:26:06,720 --> 00:26:12,000
value but doesn't change it whereas if you just do an assignment it's basically a copy by reference

253
00:26:12,000 --> 00:26:17,680
it's not a copy by value it's just going to pass around the pointer to the list so basically b will

254
00:26:17,680 --> 00:26:22,720
remain the same thing as a as long as you don't copy it whereas c will remain the original copy

255
00:26:22,720 --> 00:26:27,200
of a no matter what you do with it so that's basically one thing you have to keep in mind

256
00:26:27,200 --> 00:26:33,280
when you're copying lists from one variable to another variable here's again the next

257
00:26:34,080 --> 00:26:38,240
exercise let's say we want to create a list containing the first 20 positive integers this

258
00:26:38,240 --> 00:26:43,680
we have already done and then we want to create another list containing that squares so there are

259
00:26:43,680 --> 00:26:47,600
two things here creating the first step is straightforward we have already done that

260
00:26:47,600 --> 00:26:52,160
in the second list we want basically all the squares of the elements in the first list now

261
00:26:52,160 --> 00:26:58,400
we already know how to create how to iterate through a list and we can also create once we

262
00:26:58,400 --> 00:27:01,920
have a list how do you append elements to it so basically there are two things that you have to

263
00:27:01,920 --> 00:27:07,680
use for this exercise one is iteration and the second is the append method so let's pause the

264
00:27:07,680 --> 00:27:16,400
video over here and try it out so this is how we do it let's say that we have n which is a list of

265
00:27:16,480 --> 00:27:24,480
range of 1 to 21 and that gives me just the n which is so far correct now what I'm going to

266
00:27:24,480 --> 00:27:31,520
do is create a new list so I will call it squares and for now I'm going to keep it an empty list and

267
00:27:31,520 --> 00:27:37,840
then I'm going to iterate over n so I can do something like this for number in n I can

268
00:27:38,560 --> 00:27:48,720
do something like square equal to number times number and then squares dot append square so now

269
00:27:48,720 --> 00:27:52,560
I have another list which contains the square of all the other numbers which are inside it

270
00:27:52,560 --> 00:27:58,480
and I can simply look at it again and I see that I get the squares 1 4 9 16 and so on all the way

271
00:27:58,480 --> 00:28:04,160
up to 400 so there are two things we have covered here one is how to do iteration and the second is

272
00:28:04,160 --> 00:28:06,240
using append to append to an empty list

273
00:28:09,760 --> 00:28:14,080
here's another exercise let's say that we want to find the median of a list of numbers we have

274
00:28:14,080 --> 00:28:19,360
already studied a few things about the median it's basically the middle point in a sorted list of

275
00:28:19,360 --> 00:28:27,520
numbers so what we're going to do is basically create a random list of numbers and try to use

276
00:28:27,520 --> 00:28:32,800
all the methods that we have seen so far to find out what is the

277
00:28:34,480 --> 00:28:39,360
median of that set of numbers so again as usual pause the video try it out and

278
00:28:40,000 --> 00:28:42,480
resume the video whenever you're ready to check the solution

279
00:28:44,720 --> 00:28:50,240
so let's just create our original data first let's say I have a list L which contains a random set

280
00:28:50,240 --> 00:28:59,600
of numbers let's just say 1 4 5 8 3 and 9 now I want the median of all of this so what I'm going

281
00:28:59,600 --> 00:29:05,280
to do is simply do l dot sort to sort it and then I need to figure out what is the midpoint of L

282
00:29:05,840 --> 00:29:12,960
now the problem is that there is no midpoint because it has exactly an even number of numbers

283
00:29:12,960 --> 00:29:19,040
it has six elements so in that case what I do is basically I let's take a look at the sorted

284
00:29:19,040 --> 00:29:25,520
list and that's my sorted list what I have to do is I know that you know I can't straight away

285
00:29:25,520 --> 00:29:30,160
take the middle value because there is no middle value this is an even number of elements so I

286
00:29:30,160 --> 00:29:35,280
have to take the third and the fourth element and take their average so what I'm going to do is take

287
00:29:35,280 --> 00:29:41,040
the third number or actually that would mean two in this case and then take the second number or

288
00:29:41,040 --> 00:29:46,960
the fourth number which would mean three and take the average so I'm just going to add them and

289
00:29:46,960 --> 00:29:53,680
divide them by two and that's fine so that's basically the median of my list let's actually

290
00:29:53,680 --> 00:29:58,720
verify that with some of the inbuilt functions that are available in python we can just import

291
00:29:58,720 --> 00:30:04,720
a library called numpy which stands for numerical python we'll see this library in a lot more detail

292
00:30:04,720 --> 00:30:12,240
and I can just do numpy dot median of L and see that it gives me the same result now of course

293
00:30:12,240 --> 00:30:16,960
two and three is something that I picked just by looking at the data what if we wanted to

294
00:30:16,960 --> 00:30:24,000
make this programmatic so what we can do is we essentially now have to deal with two sorts of

295
00:30:25,280 --> 00:30:32,720
conditions one when the number of elements in L is essentially even and one when it is odd so the

296
00:30:32,720 --> 00:30:37,840
first thing I need to do is check whether the number of elements in L is even or odd so I can

297
00:30:37,840 --> 00:30:44,800
do something like small l is basically the length of L we know that length is something we can use

298
00:30:44,800 --> 00:30:50,960
to calculate the length of a list now I need to figure out whether L is an even number or an odd

299
00:30:50,960 --> 00:30:58,640
number so one of the things I can do is try to see if its remainder after it is divided by two is

300
00:30:58,640 --> 00:31:04,960
zero or not so this percent operator is basically also called the modulus operator in python what

301
00:31:04,960 --> 00:31:10,720
it does is that when you use this operator whatever is to the right hand side that becomes

302
00:31:10,720 --> 00:31:16,560
the divider of whatever is to the left hand side and it basically gives me the remainder

303
00:31:16,560 --> 00:31:21,200
when that division is carried out so when I say that L percent two equal to zero what I'm trying

304
00:31:21,200 --> 00:31:27,200
to say is that after you divide L by two is the remainder zero or not so I can do something like

305
00:31:27,200 --> 00:31:40,960
this if L percent two is zero then do something with even length else because there can only be

306
00:31:40,960 --> 00:31:50,160
a one other alternative I can say something like do something with odd length now what did we do

307
00:31:50,160 --> 00:31:57,920
with even length we basically took well the length was say six and half of it is three

308
00:31:57,920 --> 00:32:05,920
so then I took two and three so I can do something like this then print I can do something like length

309
00:32:05,920 --> 00:32:11,600
is already sorted so I can divide the whole thing into L by two so yeah I can do something like

310
00:32:11,600 --> 00:32:16,080
the cutoff point becomes L by two and that becomes

311
00:32:18,960 --> 00:32:30,160
L of L by two minus one because we start from zero and then plus L of L by two

312
00:32:31,760 --> 00:32:38,960
which is simply the next number and then I take its average so that becomes my median

313
00:32:39,520 --> 00:32:45,840
and if I have an odd length then doing it should be straightforward I can just take one out of the

314
00:32:45,840 --> 00:32:51,280
length of the list divided by two L minus one so let's say I had seven elements let's add a one

315
00:32:51,280 --> 00:32:59,200
over here so what I would do is seven minus one is six and then I take six divided by two would

316
00:32:59,200 --> 00:33:04,720
be three and then I just take the fourth element which is one plus three so basically L minus one

317
00:33:04,720 --> 00:33:10,480
divided by two and I'll leave it like that because the plus one which we require to get to this

318
00:33:10,480 --> 00:33:16,640
number and the zero indexing in Python they cancel each other out so that becomes my center point

319
00:33:16,640 --> 00:33:23,360
and then just becomes L indexed by this particular case and then I'll just say print

320
00:33:23,600 --> 00:33:34,800
okay and obviously we have a type error over here well this should have game within brackets

321
00:33:34,800 --> 00:33:41,680
because without brackets what it did was it simply tried to do a one by two you know by the Bordemus

322
00:33:41,680 --> 00:33:48,240
rules and that becomes 0.5 and you can't use floats to index a list so there it is

323
00:33:48,240 --> 00:33:55,520
let's enclose this within brackets and there it is also this is still causing a problem it seems

324
00:33:56,080 --> 00:33:59,360
so L minus one divided by two is not working out

325
00:34:02,400 --> 00:34:09,040
let us try it out so we know that L is basically seven and L minus one divided by two

326
00:34:09,760 --> 00:34:14,160
ah so we see that it's giving us a floating point number I need to convert it into an integer so

327
00:34:14,160 --> 00:34:16,480
that's what converts it into an integer

328
00:34:18,960 --> 00:34:23,600
there it is but then at the same time I will have to convert these things into an integer into

329
00:34:23,600 --> 00:34:29,600
integers as well because those two are basically going to give me floating point values and you

330
00:34:29,600 --> 00:34:34,800
can't use floating point values to index a list you can't use float because a list doesn't have

331
00:34:34,800 --> 00:34:40,320
floating point positions it only has integer positions obviously so there we are so now we

332
00:34:40,320 --> 00:34:46,720
have a median of four and let's try it out again here we also have a median of four so that's

333
00:34:46,720 --> 00:34:55,520
basically the strategy to excuse me find out the median out of a list of numbers with pure python

334
00:34:55,520 --> 00:34:59,200
of course later you'll realize that you can just use this simple function as it is

335
00:34:59,760 --> 00:35:04,000
but this basically is just an exercise to show you how lists work

336
00:35:04,000 --> 00:35:08,240
so

337
00:35:08,240 --> 00:35:13,520
now the next most important data structure that we're going to see is something called a tuple

338
00:35:13,520 --> 00:35:18,080
so a tuple is exactly like a list it's a sequence that simply resembles a list except

339
00:35:18,080 --> 00:35:24,960
unlike a list it is immutable that is it cannot be changed so for example I create a tuple

340
00:35:24,960 --> 00:35:29,200
and after that I can never change it until I create a new one so once I create this tuple

341
00:35:29,200 --> 00:35:34,160
called warehouse there is absolutely nothing I can do with this and the only difference between

342
00:35:34,160 --> 00:35:39,120
a tuple and a list or at least in the way that we create them is that instead of square brackets we

343
00:35:39,120 --> 00:35:48,160
add down brackets so basically one way to see why a tuple is immutable we can again use the same

344
00:35:48,160 --> 00:35:52,560
trick as before to figure out what are the functions that are available for a tuple if I

345
00:35:52,560 --> 00:35:58,080
do a warehouse dot and press tab I see that it gives me only two functions whereas on a list

346
00:35:58,080 --> 00:36:04,000
which is like you know L is a list I see a ton of different functions so basically tuples are

347
00:36:04,000 --> 00:36:09,040
basically used to create data that is supposed to be read only something that you don't want

348
00:36:09,040 --> 00:36:14,640
to change something that is constant right so there we are and I can use only two things I

349
00:36:14,640 --> 00:36:20,560
can say that you know I want to do an append let's say New York it's a tuple of cities

350
00:36:20,560 --> 00:36:28,480
it doesn't say it just says that you know tuple object has no attribute append won't allow that

351
00:36:28,480 --> 00:36:35,280
at the same time if I want to change Chicago to New York I know that the zeroth element is Chicago

352
00:36:35,280 --> 00:36:41,600
what if I want to change it to New York it says that tuple object does not support item assignment

353
00:36:41,600 --> 00:36:46,720
so essentially it's going to let us do absolutely nothing with this video yeah we can only read it

354
00:36:46,720 --> 00:36:52,080
we can't write to it or we can iterate through it of course we can say that for w in warehouse

355
00:36:54,160 --> 00:37:00,080
that it lets me do but pretty much anything it can't do it can only read from data it can't

356
00:37:00,080 --> 00:37:07,360
write back right another important and you know probably from a data science perspective from a

357
00:37:07,360 --> 00:37:12,960
data analytics perspective the most important data structure that we are going to look at is

358
00:37:13,040 --> 00:37:17,840
something called a dictionary so dictionary is basically python's implementation of what is

359
00:37:17,840 --> 00:37:24,080
otherwise known in computer science either as an associative array or a hash table or a lookup

360
00:37:24,080 --> 00:37:28,560
right so it's essentially just something that contains a collection of key value pairs there

361
00:37:28,560 --> 00:37:35,920
are a bunch of values and all of them are addressable with a key as we saw in tuples and lists the

362
00:37:35,920 --> 00:37:41,440
values are accessible by their location by their index here there is no such thing as position or

363
00:37:41,440 --> 00:37:46,960
location there is simply a key that you use to open a particular value that's it so and the way

364
00:37:46,960 --> 00:37:54,880
you create that is you use a pair of braces and you have a key and you put a colon and next to

365
00:37:54,880 --> 00:38:00,800
that you create a value so basically let's say that we have we want to store a bunch of phone

366
00:38:00,800 --> 00:38:05,680
numbers of a bunch of people and we have two people here called savannah and nathaniel so i

367
00:38:05,680 --> 00:38:10,800
say that savannah's phone number is this and nathaniel's phone number is this so i use a

368
00:38:10,800 --> 00:38:16,400
pair of square braces savannah and nathaniel become my keys i put a colon next to them and

369
00:38:16,400 --> 00:38:24,240
then i put in the values right so that's what it would look like there it is what this tells me

370
00:38:24,240 --> 00:38:30,240
is that savannah is my key and that person has this phone number and nathaniel is another key

371
00:38:30,240 --> 00:38:34,240
and that person has this phone number now of course why would we do this because sometimes

372
00:38:34,240 --> 00:38:39,440
it's easier to remember names rather than numbers i might simply have stored these numbers and lists

373
00:38:39,440 --> 00:38:43,280
but then you know i might have forgotten the zeroth number belongs to whom and the first

374
00:38:43,280 --> 00:38:48,320
number belongs to whom so that's why it's sometimes easier to refer to objects by their names rather

375
00:38:48,320 --> 00:38:55,920
than by their locations so of course strings are not the only thing that we can create within a

376
00:38:55,920 --> 00:39:00,480
dictionary you can create integers also so let's say that i have personal details of a person

377
00:39:00,560 --> 00:39:08,400
whose name is molly and the age is 25 so i can run this and you know there it is so that creates

378
00:39:08,400 --> 00:39:13,520
another dictionary problem let's go through some of the common dictionary operations that we can

379
00:39:13,520 --> 00:39:20,080
have in order to access a particular value from a dictionary i can use the key so for example from

380
00:39:20,080 --> 00:39:26,000
info if i want to pick out the name of whoever this particular dictionary belongs to i can just

381
00:39:26,000 --> 00:39:30,560
do an indexing like this note that this syntax is very similar to what we saw in the list

382
00:39:30,560 --> 00:39:36,000
are a couple here if this was a list we would just have set something like zero or one or two

383
00:39:36,000 --> 00:39:40,320
or something like that but remember that dictionaries have no concept of a position

384
00:39:40,320 --> 00:39:44,320
all positions are independent and they are addressable only with their key and what is our

385
00:39:44,320 --> 00:39:53,840
key it's basically just a string so we can just let's just copy this and put it here so that it

386
00:39:53,840 --> 00:40:00,080
is it just gives me molly which is the value for the key and the key is name and what i can do is

387
00:40:00,080 --> 00:40:04,960
like we had an append method earlier to add elements to a list i can add elements to a

388
00:40:04,960 --> 00:40:10,880
dictionary by simply creating a new key like this so job itself doesn't exist and if it doesn't

389
00:40:10,880 --> 00:40:16,880
exist it's going to get created right so let's add that and now i have that extra key value pair

390
00:40:16,880 --> 00:40:23,840
name is molly age is 25 and the job is analyst what if i want to update it let's say that earlier

391
00:40:23,840 --> 00:40:29,440
we added a key which did not exist sorry so it appended that key to the dictionary what if you

392
00:40:29,440 --> 00:40:35,440
want to edit a key let's say that i want to change my name from molly to sally and i can just use the

393
00:40:35,440 --> 00:40:40,640
same syntax over here the rule is that if this key exists it's going to get updated if it doesn't

394
00:40:40,640 --> 00:40:46,160
exist it's going to get added so let's try that so now i have sally 25 and analyst it's basically

395
00:40:46,160 --> 00:40:52,160
exactly the same thing as this with the exception of the name change now how do i remove a key value

396
00:40:52,160 --> 00:41:00,320
pair that also you see just depends it just behaves completely like the way we saw it for list

397
00:41:00,320 --> 00:41:05,760
so when we pop it we popped out the name we basically removed this entire key value pair

398
00:41:05,760 --> 00:41:13,280
and now only age and job is left now let's create this again and we have put the name back in i can

399
00:41:13,280 --> 00:41:16,400
also do a del which will completely delete that name

400
00:41:19,920 --> 00:41:24,560
and there it is i have removed name i can do it either by popping or i can do it by deleting

401
00:41:24,560 --> 00:41:27,200
whichever is more convenient depending on your application

402
00:41:29,680 --> 00:41:34,160
now just like we have learned how to iterate through a list you also need to learn how to

403
00:41:34,160 --> 00:41:39,360
iterate through a dictionary we know that since a list is simply a collection of elements when we

404
00:41:39,360 --> 00:41:44,080
iterate through it we are just going to deal with one particular element at a time but in the case

405
00:41:44,080 --> 00:41:49,520
of a dictionary what we have is not simply a sequence of elements but a sequence of key value

406
00:41:49,520 --> 00:41:53,360
pairs so basically there are two things over which you can iterate you can either iterate through

407
00:41:53,360 --> 00:41:59,440
keys or through values by default when you iterate through a dictionary using the same syntax you can

408
00:41:59,440 --> 00:42:04,480
have something like a for key in dictionary you are going to iterate through the keys so basically

409
00:42:04,480 --> 00:42:10,320
key is going to be age job name and so on and to get the corresponding value you have to use

410
00:42:10,320 --> 00:42:17,440
the same syntax as we had earlier which is accessing the key by its value so basically we

411
00:42:17,440 --> 00:42:23,360
can just do this we had only two keys over here so that's how we did it then there are a bunch of

412
00:42:23,360 --> 00:42:28,320
other dictionary operations we can use length just like we use it on a list for a dictionary it's

413
00:42:28,320 --> 00:42:33,600
just going to return the length of key value pairs note that it's not going to return the whole

414
00:42:34,880 --> 00:42:40,240
length of the item stored in it but basically the length of pairs so essentially this counts as one

415
00:42:40,240 --> 00:42:46,080
and this counts as two so length of info is going to be two because it has two key value pairs

416
00:42:46,640 --> 00:42:52,800
and if we want to simply list all the keys in a dictionary we can do something like info dot keys

417
00:42:52,800 --> 00:42:59,440
and pass it to a dictionary so here is the list of the keys similarly if we want the list to list

418
00:42:59,440 --> 00:43:04,720
the values then we can do info dot values to get the values out of it so here are our keys age being

419
00:43:04,720 --> 00:43:10,240
25 and job being analyst and here are our values where 25 is the value of age and analyst is the

420
00:43:10,240 --> 00:43:18,080
value of job we have already seen how we remove individual elements from a particular dictionary

421
00:43:18,080 --> 00:43:23,360
let's say that i want to remove only the name or only i want to use the you know only a specific

422
00:43:23,360 --> 00:43:28,960
key i want to remove only a specific key i can use either a pop or a del method to do that

423
00:43:28,960 --> 00:43:34,080
here if i want to remove everything inside a dictionary i can do something like clear so

424
00:43:34,080 --> 00:43:40,480
essentially that just returns an empty dictionary right dictionaries are important primarily like i

425
00:43:40,480 --> 00:43:47,920
said from a data science perspective because they are very useful for representing data so here is

426
00:43:47,920 --> 00:43:54,320
let's say a simple dictionary that we have created data is our dictionary and we have three keys

427
00:43:54,320 --> 00:43:59,440
inside that dictionary one is called name the other is industry and the third is funding in

428
00:43:59,440 --> 00:44:06,800
us dollars the values of each of these keys are essentially lists here name is a list of three

429
00:44:06,800 --> 00:44:12,560
startups industry is basically the industry that you know that particular startup operates in and

430
00:44:12,560 --> 00:44:17,600
funding usd is again a list but this time it's a list of integers because funding is numbers so you

431
00:44:17,600 --> 00:44:23,920
can use lists you can use integers to represent them what we have is three keys and each value

432
00:44:23,920 --> 00:44:29,040
is basically a list which has a length of three what do you think this represents if you think

433
00:44:29,040 --> 00:44:33,840
carefully you'll see that this basically represents a table right so which has essentially three

434
00:44:33,840 --> 00:44:40,800
columns and three rows so let's try that we can use the pandas library to convert this dictionary

435
00:44:40,800 --> 00:44:46,720
into an actual table we'll be dealing with pandas in a lot more detail in some of the upcoming

436
00:44:46,720 --> 00:44:53,280
videos so that's basically what it represents when i put this dictionary inside pandas every

437
00:44:53,280 --> 00:45:00,000
key becomes a column and the values basically become the values of those columns so essentially

438
00:45:00,000 --> 00:45:04,320
name which is by juice flip carton shuttle appears here by juice flip carton shuttle

439
00:45:04,320 --> 00:45:09,280
and correspondingly the industry and the funding appear like the industry and the funding columns

440
00:45:09,280 --> 00:45:17,200
so this is one way of representing tabular data with a dictionary the alternative is to basically

441
00:45:17,840 --> 00:45:23,840
create a list of dictionaries itself what we did here was we created a dictionary where the

442
00:45:23,840 --> 00:45:29,520
keys were strings and the values were dictionaries the alternative is we are creating a dictionary

443
00:45:29,520 --> 00:45:35,120
note that we have square braces or square bracket at the ends so this is basically a

444
00:45:36,000 --> 00:45:40,160
list and know that we can put anything inside a list so in this case what we have done is that

445
00:45:40,160 --> 00:45:45,360
we have put an entire dictionary inside a list so essentially we have and inside each of them

446
00:45:45,360 --> 00:45:50,720
we have name industry and funding specifically called out as the key value pairs so name is by

447
00:45:50,720 --> 00:45:56,800
juice industries etec funding is so much name is flip cart industries e-commerce funding is so much

448
00:45:56,800 --> 00:46:02,160
name is shuttle industries transport and funding is so much so this is your classic database record

449
00:46:02,160 --> 00:46:09,120
format so essentially you see that both these representations are actually representing the

450
00:46:09,120 --> 00:46:14,640
same data and if we were to create again the pandas data frame it looks exactly identical

451
00:46:14,640 --> 00:46:19,520
but here we have a list of dictionaries and here we have a dictionary of lists

452
00:46:20,160 --> 00:46:26,160
so it's the same data being represented in two different ways and how to choose and pick between

453
00:46:26,160 --> 00:46:33,360
them is basically the job of is basically one of the most important jobs of a data scientist

454
00:46:33,360 --> 00:46:41,520
because when programming when writing scripts when writing especially you know scripts that

455
00:46:41,520 --> 00:46:47,200
work with large amounts of data these things will become important as we will see so here's

456
00:46:47,200 --> 00:46:53,520
an exercise let's say that we have one we have this data set this particular table we want to

457
00:46:53,520 --> 00:46:58,080
add a column to this data set denoting the location that is mumbai bangalore and chennai

458
00:46:58,080 --> 00:47:02,880
we have name industry and funding we want to add another column here which is simply mumbai bangalore

459
00:47:02,880 --> 00:47:08,160
and chennai for example then what we want to do is add a row to this data set for a new startup

460
00:47:08,160 --> 00:47:13,200
let's call it just atm which is in the e-payments industry so we know what to fill in the name and

461
00:47:13,200 --> 00:47:18,640
we know what to fill in the industry and let's say it is located in delhi we have already added the

462
00:47:18,640 --> 00:47:24,880
column for the location and let's say that it has supposedly received a funding of 42 million usd

463
00:47:24,880 --> 00:47:30,320
so how do you do that we have two particular ways of doing it let's see which one is better

464
00:47:31,440 --> 00:47:37,280
try out both the things and just type in the data and just use you're free to copy paste

465
00:47:37,280 --> 00:47:44,000
code from anywhere in this notebook to try and finish this exercise so feel free to pause the

466
00:47:44,000 --> 00:47:51,120
video here and resume when you're ready with the solution okay so let's take a look the first task

467
00:47:51,120 --> 00:47:56,160
is to add a column to this data set which denotes the location so you see that the first

468
00:47:56,160 --> 00:48:01,840
tree presentation which have is a column first representation in the sense that the columns are

469
00:48:01,840 --> 00:48:07,840
the keys and the values in each row are simply a list so if i want to add another column i can

470
00:48:07,840 --> 00:48:13,280
just use this now i'll just paste this over here and say that the column that i want to add

471
00:48:13,280 --> 00:48:19,280
is simply location and then that location becomes a list of strings let's say mumbai

472
00:48:21,280 --> 00:48:29,600
bangalore and chennai and then i'm just going to create a data frame out of oops

473
00:48:29,600 --> 00:48:34,480
sorry i'm just going to create a data frame out of the data over here and there it is so now we

474
00:48:34,480 --> 00:48:41,040
have a new column called location now what we want to do is add a row to this data set now you see

475
00:48:41,040 --> 00:48:47,280
that this was a representation that was column specific so if i have to add a row over here

476
00:48:47,280 --> 00:48:52,320
i'll have to go and type the individual value in each particular row so adding a row to this

477
00:48:52,320 --> 00:48:54,960
data set for paytm so let's add paytm first

478
00:48:58,960 --> 00:49:05,440
and which is in the e-payments industry so i some add something like e-payments it is

479
00:49:05,440 --> 00:49:12,720
located in delhi so i add delhi over here and it has received a supposed funding of 42 million

480
00:49:12,720 --> 00:49:21,520
so i will add something like this so there it is i have a new column and a new row right so remember

481
00:49:21,520 --> 00:49:29,200
that you know if i had to add another row i had to basically modify and append each single list in

482
00:49:29,200 --> 00:49:35,920
my each single column in my original data but if you were to use this particular thing this

483
00:49:35,920 --> 00:49:40,560
particular syntax which is a row first syntax this time it's not a column first syntax it's

484
00:49:40,560 --> 00:49:46,720
basically a row first syntax so let's try this now i just want to add a new record for paytm

485
00:49:46,720 --> 00:49:51,600
so i can just do something like this name is paytm

486
00:49:54,960 --> 00:49:58,480
industry is what was it e-payments

487
00:50:01,200 --> 00:50:02,480
and funding

488
00:50:06,080 --> 00:50:07,120
is 42 million

489
00:50:07,120 --> 00:50:14,400
and then i can just do pd.dataframe.fromrecords.data

490
00:50:15,440 --> 00:50:21,600
so there it is something went wrong this is not a dot it's supposed to be a comma so there we are

491
00:50:22,320 --> 00:50:27,600
so here we have added a row but we missed out on the column which is the location column so if i

492
00:50:27,600 --> 00:50:32,000
have to add that column again i have to do the inverse of what i did earlier basically add a

493
00:50:32,000 --> 00:50:40,720
location key everywhere so location would be mumbai location then would be location for

494
00:50:40,720 --> 00:50:46,720
flipkart would be something like bangor location for shuttle would be chennai

495
00:50:50,880 --> 00:50:53,760
and for paytm location would be dead

496
00:50:54,320 --> 00:51:03,200
so now i have an extra row and an extra column so you see when you have to add a row a certain

497
00:51:03,200 --> 00:51:08,880
type of data representation is useful because i just have to type you know this much whereas

498
00:51:08,880 --> 00:51:14,000
if i had to add a row in this particular case i'll have to add this then this then this in

499
00:51:14,000 --> 00:51:17,520
this basically i have to change four lines whereas here i have to change only one line

500
00:51:17,520 --> 00:51:22,960
on the other hand if i have to add a column then i just have to type in this much in this

501
00:51:22,960 --> 00:51:27,760
particular representation but in this representation when i have to add a column i have to append this

502
00:51:27,760 --> 00:51:34,000
whole bunch of text at the end of every row so depending on what your application demands

503
00:51:34,000 --> 00:51:40,800
whether it is something that demands incrementing in rows versus incrementing in columns choosing

504
00:51:40,800 --> 00:51:46,480
the right data structure is important if we want to go on adding columns then this is the

505
00:51:46,480 --> 00:51:51,200
right data structure but if we want to go on adding rows then this is the right data structure

506
00:51:51,280 --> 00:51:57,040
so you can choose between say lists of dictionaries versus dictionaries of lists depending on

507
00:51:57,040 --> 00:52:03,920
what sort of updates you want to do to your data for example imagine that you have a fintech

508
00:52:03,920 --> 00:52:09,120
application again as we've used this example before where you are trying to predict whether

509
00:52:09,120 --> 00:52:14,800
somebody is you know eligible for a loan or something like that and you already have data

510
00:52:14,800 --> 00:52:19,280
for about a thousand customers and the thousand and first customer comes in and you want to create

511
00:52:19,280 --> 00:52:24,080
a row for this person then obviously this sort of representation will be better right because

512
00:52:24,080 --> 00:52:30,400
you're just adding one particular dictionary for the new customer that has come however if let's

513
00:52:30,400 --> 00:52:35,920
say that your ceo comes back and says that hey it looks like we have been taking all kinds of

514
00:52:35,920 --> 00:52:42,720
details for each customer but we haven't exactly included their age in our table so we have their

515
00:52:42,720 --> 00:52:48,080
name we have their income we have their gender but we don't have their age so now we have to add

516
00:52:48,080 --> 00:52:52,720
another column so then this sort of a thing might be useful but of course once the set of

517
00:52:52,720 --> 00:52:57,440
columns stabilizes you might want to move from this sort of a representation to this sort of a

518
00:52:57,440 --> 00:53:04,240
representation the whole point of this entire video was to get you acquainted with data structures

519
00:53:04,240 --> 00:53:09,280
and how to pick the right data structure which makes your job easier which makes your job more

520
00:53:09,280 --> 00:53:14,000
flexible which makes writing code easy so accordingly depending on the application you

521
00:53:14,000 --> 00:53:17,680
can pick the right data structure all the best

